package bit

// reverseBits 颠倒二进制位
// 位运算
func reverseBits(x uint32) uint32 {
	// res << 1: 将res 向左移动一位（尾部加0），相当于乘2。同时 空出最右边的位置，为 | 操作提供位置
	// x&1: x 的二进制最低位与1左与运算，如果是1返回1,如果是0 返回0, 相当于取出x 的最低位 (最右边的位)
	// | : 将 res << 1 的结果与 x 的最低位做或运算，因为res<<1 之后，最低位是0,所以 最低位将是 x&1 的结果
	// x >>= 1: x 右移一位，相当于抛弃最低位，然后拿出倒数第二位
	// 如此循环下来，将x的低位，逐渐放到了res的高位之上
	var res uint32

	for i := 0; i < 32; i++ {

		res = (res << 1) | (x & 1)
		x >>= 1
	}

	return res
}
